---
import CornerCat from './CornerCat.astro';
import Snow from './Snow.astro';
import ChristmasDecorations from './ChristmasDecorations.astro';
import { catAnimationConfig } from '../config/animations';
---

<div class="corner-cats">
  <Snow count={100} />
  <ChristmasDecorations />
  <CornerCat corner="top-left" />
  <CornerCat corner="top-right" />
  <CornerCat corner="bottom-left" />
  <CornerCat corner="bottom-right" />
</div>

<script>
  import { catAnimationConfig } from '../config/animations';

  let audio: HTMLAudioElement | null = null;
  let activeFullscreenCat: HTMLElement | null = null;

  function initAudio() {
    audio = new Audio(catAnimationConfig.audio.url);
    audio.volume = catAnimationConfig.audio.volume;
  }

  function playAudio() {
    if (!audio) initAudio();
    if (audio) {
      audio.currentTime = 0;
      audio.play();
    }
  }

  function showFullscreenCat(cat: Element) {
    if (activeFullscreenCat) {
      activeFullscreenCat.remove();
      activeFullscreenCat = null;
      return;
    }

    const catElement = cat.cloneNode(true) as HTMLElement;
    catElement.classList.add('fullscreen');
    document.body.appendChild(catElement);
    activeFullscreenCat = catElement;
    playAudio();

    catElement.addEventListener('click', () => {
      catElement.remove();
      activeFullscreenCat = null;
    });
  }

  function showRandomCat() {
    if (activeFullscreenCat) return; // Don't show new cats while in fullscreen

    const cats = document.querySelectorAll('.corner-cat');
    const previousCat = document.querySelector('.corner-cat.show');
    
    if (previousCat) {
      previousCat.classList.remove('show');
      previousCat.classList.add('exit');
      setTimeout(() => {
        previousCat.classList.remove('exit');
      }, catAnimationConfig.timing.animationDuration);
    }

    const availableCats = Array.from(cats).filter(cat => cat !== previousCat);
    const randomIndex = Math.floor(Math.random() * availableCats.length);
    const selectedCat = availableCats[randomIndex];
    
    selectedCat.classList.add('show');
    
    setTimeout(() => {
      selectedCat.classList.add('wiggle');
    }, catAnimationConfig.timing.animationDuration);

    setTimeout(() => {
      selectedCat.classList.remove('wiggle');
      selectedCat.classList.add('exit');
      
      setTimeout(() => {
        selectedCat.classList.remove('show', 'exit');
      }, catAnimationConfig.timing.animationDuration);
      
    }, catAnimationConfig.timing.showDuration - catAnimationConfig.timing.animationDuration);
  }

  function scheduleNextCat() {
    const { minDelay, maxDelay } = catAnimationConfig.timing;
    const randomDelay = Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;
    
    setTimeout(() => {
      showRandomCat();
      scheduleNextCat();
    }, randomDelay);
  }

  // Add click handlers to cats
  document.querySelectorAll('.corner-cat').forEach(cat => {
    cat.addEventListener('click', () => {
      if (cat.classList.contains('show')) {
        showFullscreenCat(cat);
      }
    });
  });

  // Start the cat appearances
  scheduleNextCat();
</script>